{
  "info": {
    "name": "Mirror API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "API Tests for the Mirror Journaling App"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - Successful",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has the correct message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login successful\");",
                  "});",
                  "",
                  "pm.test(\"Response includes token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.token.length).to.be.greaterThan(10);",
                  "    ",
                  "    // Store the token for other requests",
                  "    pm.collectionVariables.set('authToken', jsonData.token);",
                  "});",
                  "",
                  "pm.test(\"Response includes user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.user.id).to.exist;",
                  "    pm.expect(jsonData.user.email).to.exist;",
                  "    pm.expect(jsonData.user.name).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with valid credentials"
          }
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for invalid credentials\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has the correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Invalid email or password\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"wrong@example.com\",\n    \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with invalid credentials"
          }
        },
        {
          "name": "Login - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for missing fields\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has the correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"All fields are required\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with missing required fields"
          }
        }
      ],
      "description": "Tests for the authentication endpoints"
    },
    {
      "name": "Journals",
      "item": [
        {
          "name": "Create Journal Entry - Successful",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response includes journal data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.exist;",
                  "    pm.expect(jsonData.content).to.exist;",
                  "    pm.expect(jsonData.user_id).to.exist;",
                  "    pm.expect(jsonData.createdAt).to.exist;",
                  "",
                  "    // Verify the content matches what we sent",
                  "    pm.expect(jsonData.content).to.eql(\"This is a test journal entry\");",
                  "    pm.expect(jsonData.mood).to.eql(\"happy\");",
                  "",
                  "    // Store the journal ID for future tests",
                  "    pm.collectionVariables.set('journalId', jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"This is a test journal entry\",\n    \"mood\": \"happy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/journals",
              "host": ["{{baseUrl}}"],
              "path": ["api", "journals"]
            },
            "description": "Create a new journal entry"
          }
        },
        {
          "name": "Create Journal Entry - Missing Content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for missing content\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has the correct error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Content is required\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"\",\n    \"mood\": \"happy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/journals",
              "host": ["{{baseUrl}}"],
              "path": ["api", "journals"]
            },
            "description": "Create a journal entry with missing content"
          }
        },
        {
          "name": "Create Journal Entry - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 for unauthorized request\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"This is a test journal entry\",\n    \"mood\": \"happy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/journals",
              "host": ["{{baseUrl}}"],
              "path": ["api", "journals"]
            },
            "description": "Create a journal entry without authentication"
          }
        },
        {
          "name": "Get Journal Entries",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response includes journal list data structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.items).to.exist;",
                  "    pm.expect(jsonData.page).to.exist;",
                  "    pm.expect(jsonData.limit).to.exist;",
                  "    pm.expect(jsonData.hasMore).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Journal list has the expected structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if(jsonData.items.length > 0) {",
                  "        pm.expect(jsonData.items[0]._id).to.exist;",
                  "        pm.expect(jsonData.items[0].createdAt).to.exist;",
                  "        pm.expect(jsonData.items[0].excerpt).to.exist;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/journals?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "journals"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get a list of user's journal entries"
          }
        }
      ],
      "description": "Tests for the journal endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "password123",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "journalId",
      "value": "",
      "type": "string"
    }
  ]
}